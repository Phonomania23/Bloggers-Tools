// blogger-analytics.js

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
const ANALYTICS_CONFIG = {
  chartColors: {
    primary: 'rgba(101, 116, 255, 0.8)',
    secondary: 'rgba(155, 81, 255, 0.8)',
    accent: 'rgba(76, 175, 80, 0.8)',
    background: 'rgba(245, 246, 247, 0.1)'
  },
  metrics: {
    engagement: ['–û—á–µ–Ω—å –Ω–∏–∑–∫–∏–π', '–ù–∏–∑–∫–∏–π', '–°—Ä–µ–¥–Ω–∏–π', '–í—ã—Å–æ–∫–∏–π', '–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π'],
    audienceQuality: ['–ù–∏–∑–∫–æ–µ', '–ù–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ', '–°—Ä–µ–¥–Ω–µ–µ', '–í—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ', '–í—ã—Å–æ–∫–æ–µ']
  }
};

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
class BloggerAnalytics {
  constructor(bloggerData, containerSelector = '#analytics-container') {
    this.blogger = bloggerData;
    this.container = document.querySelector(containerSelector);
    this.charts = {};
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
  init() {
    if (!this.container) {
      console.warn('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    this.renderAnalytics();
    this.initCharts();
  }

  // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
  renderAnalytics() {
    this.container.innerHTML = this.getAnalyticsHTML();
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
  getAnalyticsHTML() {
    const stats = this.calculateMetrics();
    
    return `
      <div class="analytics-section">
        <h3>üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞</h3>
        
        <div class="analytics-grid">
          <!-- –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ -->
          <div class="metric-card">
            <div class="metric-value">${stats.engagement.score}%</div>
            <div class="metric-label">–í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å</div>
            <div class="metric-description">${stats.engagement.level}</div>
          </div>
          
          <div class="metric-card">
            <div class="metric-value">${stats.audienceQuality.score}/10</div>
            <div class="metric-label">–ö–∞—á–µ—Å—Ç–≤–æ –∞—É–¥–∏—Ç–æ—Ä–∏–∏</div>
            <div class="metric-description">${stats.audienceQuality.level}</div>
          </div>
          
          <div class="metric-card">
            <div class="metric-value">${stats.avgViews.toLocaleString('ru-RU')}</div>
            <div class="metric-label">–°—Ä. –ø—Ä–æ—Å–º–æ—Ç—Ä—ã</div>
            <div class="metric-description">–∑–∞ 30 –¥–Ω–µ–π</div>
          </div>
          
          <div class="metric-card">
            <div class="metric-value">${stats.retentionRate}%</div>
            <div class="metric-label">–£–¥–µ—Ä–∂–∞–Ω–∏–µ</div>
            <div class="metric-description">–¥–æ –∫–æ–Ω—Ü–∞ —Ä–æ–ª–∏–∫–∞</div>
          </div>
        </div>

        <!-- –ì—Ä–∞—Ñ–∏–∫–∏ -->
        <div class="charts-grid">
          <div class="chart-container">
            <div class="chart-title">üìà –î–∏–Ω–∞–º–∏–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤</div>
            <canvas id="subscribersChart" width="400" height="250"></canvas>
          </div>
          
          <div class="chart-container">
            <div class="chart-title">üî• –í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å –ø–æ—Å—Ç–∞–º</div>
            <canvas id="engagementChart" width="400" height="250"></canvas>
          </div>
        </div>

        <!-- –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ -->
        <div class="detailed-stats">
          <h4>üìã –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h4>
          <div class="stats-table">
            <div class="stat-row">
              <span>–ú–∞–∫—Å. –æ—Ö–≤–∞—Ç</span>
              <span>${stats.maxReach.toLocaleString('ru-RU')}</span>
            </div>
            <div class="stat-row">
              <span>CTR</span>
              <span>${stats.ctr}%</span>
            </div>
            <div class="stat-row">
              <span>–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏</span>
              <span>${stats.bestPostTime}</span>
            </div>
            <div class="stat-row">
              <span>–†–æ—Å—Ç –∑–∞ –º–µ—Å—è—Ü</span>
              <span>+${stats.monthlyGrowth} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤</span>
            </div>
          </div>
        </div>

        <!-- –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ -->
        <div class="recommendations">
          <h4>üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h4>
          <ul>
            ${stats.recommendations.map(rec => `<li>${rec}</li>`).join('')}
          </ul>
        </div>
      </div>
    `;
  }

  // –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –±–ª–æ–≥–µ—Ä–∞
  calculateMetrics() {
    const subs = this.blogger.subscribers || 100000;
    const avgViews = this.blogger.avgViews || Math.round(subs / 3);
    
    // –†–∞—Å—á–µ—Ç –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏ (—Å–∏–º—É–ª—è—Ü–∏—è)
    const engagementScore = Math.min(100, Math.max(1, Math.round((avgViews / subs) * 100 * 1.5)));
    const engagementLevel = this.getEngagementLevel(engagementScore);
    
    // –†–∞—Å—á–µ—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –∞—É–¥–∏—Ç–æ—Ä–∏–∏
    const audienceScore = Math.min(10, Math.max(1, Math.round((engagementScore / 10) + 4)));
    const audienceLevel = this.getAudienceQualityLevel(audienceScore);
    
    return {
      engagement: {
        score: engagementScore,
        level: engagementLevel
      },
      audienceQuality: {
        score: audienceScore,
        level: audienceLevel
      },
      avgViews: avgViews,
      retentionRate: Math.min(100, Math.max(20, Math.round(75 - (subs / 500000)))),
      maxReach: Math.round(avgViews * 1.8),
      ctr: (engagementScore / 10).toFixed(1),
      bestPostTime: this.getBestPostTime(),
      monthlyGrowth: Math.round(subs * 0.05),
      recommendations: this.generateRecommendations(engagementScore, audienceScore)
    };
  }

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏
  getEngagementLevel(score) {
    const levels = ANALYTICS_CONFIG.metrics.engagement;
    if (score >= 80) return levels[4];
    if (score >= 60) return levels[3];
    if (score >= 40) return levels[2];
    if (score >= 20) return levels[1];
    return levels[0];
  }

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∞—É–¥–∏—Ç–æ—Ä–∏–∏
  getAudienceQualityLevel(score) {
    const levels = ANALYTICS_CONFIG.metrics.audienceQuality;
    if (score >= 8) return levels[4];
    if (score >= 6) return levels[3];
    if (score >= 5) return levels[2];
    if (score >= 4) return levels[1];
    return levels[0];
  }

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ª—É—á—à–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
  getBestPostTime() {
    const times = ['18:00-20:00', '16:00-18:00', '12:00-14:00', '20:00-22:00'];
    return times[Math.floor(Math.random() * times.length)];
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
  generateRecommendations(engagementScore, audienceScore) {
    const recommendations = [];
    
    if (engagementScore < 50) {
      recommendations.push('–£–≤–µ–ª–∏—á—å—Ç–µ —á–∞—Å—Ç–æ—Ç—É –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∞—É–¥–∏—Ç–æ—Ä–∏–µ–π –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö');
    }
    
    if (audienceScore < 6) {
      recommendations.push('–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –±–æ–ª–µ–µ —Ç–∞—Ä–≥–µ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –∞—É–¥–∏—Ç–æ—Ä–∏–∏');
    }
    
    recommendations.push('–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å —Ñ–æ—Ä–º–∞—Ç–∞–º–∏: —Ä–∏–ª—Å—ã, —Å—Ç–æ—Ä–∏—Å, –ø—Ä—è–º—ã–µ —ç—Ñ–∏—Ä—ã');
    recommendations.push('–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ç–æ–ø–æ–≤—ã–µ –ø–æ—Å—Ç—ã –∏ –ø–æ–≤—Ç–æ—Ä—è–π—Ç–µ —É—Å–ø–µ—à–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã');
    
    return recommendations;
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
  initCharts() {
    this.initSubscribersChart();
    this.initEngagementChart();
  }

  // –ì—Ä–∞—Ñ–∏–∫ –¥–∏–Ω–∞–º–∏–∫–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
  initSubscribersChart() {
    const ctx = document.getElementById('subscribersChart')?.getContext('2d');
    if (!ctx) return;

    const data = this.generateSubscribersData();
    
    this.charts.subscribers = new Chart(ctx, {
      type: 'line',
      data: {
        labels: ['–Ø–Ω–≤', '–§–µ–≤', '–ú–∞—Ä', '–ê–ø—Ä', '–ú–∞–π', '–ò—é–Ω', '–ò—é–ª', '–ê–≤–≥', '–°–µ–Ω'],
        datasets: [{
          label: '–ü–æ–¥–ø–∏—Å—á–∏–∫–∏',
          data: data,
          borderColor: ANALYTICS_CONFIG.chartColors.primary,
          backgroundColor: 'rgba(101, 116, 255, 0.1)',
          tension: 0.4,
          fill: true
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: {
            display: false
          }
        }
      }
    });
  }

  // –ì—Ä–∞—Ñ–∏–∫ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏
  initEngagementChart() {
    const ctx = document.getElementById('engagementChart')?.getContext('2d');
    if (!ctx) return;

    this.charts.engagement = new Chart(ctx, {
      type: 'bar',
      data: {
        labels: ['–ü–æ–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'],
        datasets: [{
          label: '–í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å (%)',
          data: [65, 59, 80, 81, 56, 55, 40],
          backgroundColor: ANALYTICS_CONFIG.chartColors.secondary,
          borderColor: 'rgba(155, 81, 255, 1)',
          borderWidth: 1
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: {
            display: false
          }
        }
      }
    });
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
  generateSubscribersData() {
    const base = (this.blogger.subscribers || 100000) * 0.7;
    return Array.from({length: 9}, (_, i) => 
      Math.round(base + (base * 0.1 * i) + (Math.random() * base * 0.05))
    );
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
  updateAnalytics(newData) {
    this.blogger = {...this.blogger, ...newData};
    this.renderAnalytics();
    this.updateCharts();
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
  updateCharts() {
    Object.values(this.charts).forEach(chart => {
      if (chart) chart.destroy();
    });
    this.initCharts();
  }

  // –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
  exportData(format = 'json') {
    const data = this.calculateMetrics();
    
    if (format === 'json') {
      return JSON.stringify({
        blogger: this.blogger,
        analytics: data,
        timestamp: new Date().toISOString()
      }, null, 2);
    }
    
    return data;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
function initBloggerAnalytics(bloggerData, containerSelector = '#analytics-container') {
  const analytics = new BloggerAnalytics(bloggerData, containerSelector);
  analytics.init();
  return analytics;
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
document.addEventListener('DOMContentLoaded', function() {
  const analyticsContainer = document.querySelector('#analytics-container');
  if (analyticsContainer && window.bloggerData) {
    initBloggerAnalytics(window.bloggerData);
  }
});