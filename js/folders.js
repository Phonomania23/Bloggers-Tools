// js/folders.js - –°–∏—Å—Ç–µ–º–∞ –ø–∞–ø–æ–∫ –∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–ª—è –±–ª–æ–≥–µ—Ä–æ–≤
class FoldersSystem {
    constructor() {
        this.folders = [];
        this.favorites = new Set();
        this.init();
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
    init() {
        this.loadFromStorage();
        this.setupEventListeners();
        this.renderFoldersSidebar();
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ localStorage
    loadFromStorage() {
        try {
            const savedFolders = localStorage.getItem('bloggerFolders');
            const savedFavorites = localStorage.getItem('bloggerFavorites');
            
            if (savedFolders) {
                this.folders = JSON.parse(savedFolders);
            }
            
            if (savedFavorites) {
                this.favorites = new Set(JSON.parse(savedFavorites));
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
            this.folders = [];
            this.favorites = new Set();
        }
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ localStorage
    saveToStorage() {
        try {
            localStorage.setItem('bloggerFolders', JSON.stringify(this.folders));
            localStorage.setItem('bloggerFavorites', JSON.stringify(Array.from(this.favorites)));
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
        }
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    setupEventListeners() {
        // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        document.addEventListener('click', this.handleGlobalClick.bind(this));
        
        // –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        document.addEventListener('click', (e) => {
            if (e.target.closest('.add-to-folder-btn')) {
                this.handleAddToFolder(e);
            }
            if (e.target.closest('.toggle-favorite')) {
                this.toggleFavorite(e);
            }
            if (e.target.closest('.create-folder-btn')) {
                this.showCreateFolderModal();
            }
        });
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–∞–ø–∫–∏
    createFolder(name, color = '#667eea', isPrivate = false) {
        const newFolder = {
            id: Date.now().toString(),
            name: name.trim(),
            color: color,
            isPrivate: isPrivate,
            bloggers: [],
            createdAt: new Date().toISOString(),
            updatedAt: new Date().toISOString()
        };

        this.folders.push(newFolder);
        this.saveToStorage();
        this.renderFoldersSidebar();
        
        return newFolder;
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ –ø–∞–ø–∫–∏
    deleteFolder(folderId) {
        this.folders = this.folders.filter(folder => folder.id !== folderId);
        this.saveToStorage();
        this.renderFoldersSidebar();
    }

    // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏
    renameFolder(folderId, newName) {
        const folder = this.folders.find(f => f.id === folderId);
        if (folder) {
            folder.name = newName.trim();
            folder.updatedAt = new Date().toISOString();
            this.saveToStorage();
            this.renderFoldersSidebar();
        }
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ–≥–µ—Ä–∞ –≤ –ø–∞–ø–∫—É
    addToFolder(bloggerId, folderId) {
        const folder = this.folders.find(f => f.id === folderId);
        if (folder && !folder.bloggers.includes(bloggerId)) {
            folder.bloggers.push(bloggerId);
            folder.updatedAt = new Date().toISOString();
            this.saveToStorage();
            return true;
        }
        return false;
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ –±–ª–æ–≥–µ—Ä–∞ –∏–∑ –ø–∞–ø–∫–∏
    removeFromFolder(bloggerId, folderId) {
        const folder = this.folders.find(f => f.id === folderId);
        if (folder) {
            folder.bloggers = folder.bloggers.filter(id => id !== bloggerId);
            folder.updatedAt = new Date().toISOString();
            this.saveToStorage();
            return true;
        }
        return false;
    }

    // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –±–ª–æ–≥–µ—Ä–∞ –º–µ–∂–¥—É –ø–∞–ø–∫–∞–º–∏
    moveBlogger(bloggerId, fromFolderId, toFolderId) {
        if (this.removeFromFolder(bloggerId, fromFolderId)) {
            return this.addToFolder(bloggerId, toFolderId);
        }
        return false;
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
    toggleFavorite(event) {
        const button = event.target.closest('.toggle-favorite');
        if (!button) return;

        const bloggerId = button.dataset.bloggerId;
        if (!bloggerId) return;

        if (this.favorites.has(bloggerId)) {
            this.favorites.delete(bloggerId);
            button.classList.remove('favorited');
            button.innerHTML = '‚òÜ';
        } else {
            this.favorites.add(bloggerId);
            button.classList.add('favorited');
            button.innerHTML = '‚≠ê';
        }

        this.saveToStorage();
        this.updateFavoriteBadges();
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –±–ª–æ–≥–µ—Ä –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
    isFavorite(bloggerId) {
        return this.favorites.has(bloggerId);
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –±–ª–æ–≥–µ—Ä–æ–≤
    getFavorites() {
        return Array.from(this.favorites);
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –±–ª–æ–≥–µ—Ä–æ–≤ –≤ –ø–∞–ø–∫–µ
    getFolderBloggers(folderId) {
        const folder = this.folders.find(f => f.id === folderId);
        return folder ? folder.bloggers : [];
    }

    // –ü–æ–∏—Å–∫ –ø–∞–ø–æ–∫ —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö –±–ª–æ–≥–µ—Ä–∞
    getBloggerFolders(bloggerId) {
        return this.folders.filter(folder => 
            folder.bloggers.includes(bloggerId)
        );
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–π–¥–∂–µ–π –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
    updateFavoriteBadges() {
        document.querySelectorAll('.toggle-favorite').forEach(button => {
            const bloggerId = button.dataset.bloggerId;
            if (bloggerId && this.isFavorite(bloggerId)) {
                button.classList.add('favorited');
                button.innerHTML = '‚≠ê';
            } else {
                button.classList.remove('favorited');
                button.innerHTML = '‚òÜ';
            }
        });
    }

    // –†–µ–Ω–¥–µ—Ä —Å–∞–π–¥–±–∞—Ä–∞ —Å –ø–∞–ø–∫–∞–º–∏
    renderFoldersSidebar() {
        const sidebar = document.getElementById('foldersSidebar');
        if (!sidebar) return;

        sidebar.innerHTML = this.generateFoldersSidebarHTML();
        this.attachFolderSidebarListeners();
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML —Å–∞–π–¥–±–∞—Ä–∞ –ø–∞–ø–æ–∫
    generateFoldersSidebarHTML() {
        return `
            <div class="folders-header">
                <h3>üìÅ –ú–æ–∏ –ø–∞–ø–∫–∏</h3>
                <button class="btn-icon create-folder-btn" title="–°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É">+</button>
            </div>
            
            <div class="folders-list">
                <div class="folder-item ${this.favorites.size > 0 ? 'has-items' : ''}" data-folder-id="favorites">
                    <span class="folder-icon">‚≠ê</span>
                    <span class="folder-name">–ò–∑–±—Ä–∞–Ω–Ω–æ–µ</span>
                    <span class="folder-count">${this.favorites.size}</span>
                </div>
                
                ${this.folders.map(folder => `
                    <div class="folder-item ${folder.bloggers.length > 0 ? 'has-items' : ''}" data-folder-id="${folder.id}">
                        <span class="folder-icon" style="color: ${folder.color}">üìÅ</span>
                        <span class="folder-name">${folder.name}</span>
                        <span class="folder-count">${folder.bloggers.length}</span>
                        <div class="folder-actions">
                            <button class="btn-icon edit-folder" data-folder-id="${folder.id}" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">‚úèÔ∏è</button>
                            <button class="btn-icon delete-folder" data-folder-id="${folder.id}" title="–£–¥–∞–ª–∏—Ç—å">üóëÔ∏è</button>
                        </div>
                    </div>
                `).join('')}
                
                ${this.folders.length === 0 ? `
                    <div class="empty-state">
                        <p>–ü–∞–ø–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç</p>
                        <p class="muted">–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –ø–∞–ø–∫—É –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –±–ª–æ–≥–µ—Ä–æ–≤</p>
                    </div>
                ` : ''}
            </div>
        `;
    }

    // –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Å–∞–π–¥–±–∞—Ä–∞
    attachFolderSidebarListeners() {
        // –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–∞–ø–∫–∏
        document.querySelectorAll('.folder-item').forEach(item => {
            item.addEventListener('click', (e) => {
                if (!e.target.closest('.folder-actions')) {
                    const folderId = item.dataset.folderId;
                    this.openFolder(folderId);
                }
            });
        });

        // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏
        document.querySelectorAll('.edit-folder').forEach(btn => {
            btn.addEventListener('click', (e) => {
                e.stopPropagation();
                const folderId = btn.dataset.folderId;
                this.showEditFolderModal(folderId);
            });
        });

        // –£–¥–∞–ª–µ–Ω–∏–µ –ø–∞–ø–∫–∏
        document.querySelectorAll('.delete-folder').forEach(btn => {
            btn.addEventListener('click', (e) => {
                e.stopPropagation();
                const folderId = btn.dataset.folderId;
                this.confirmDeleteFolder(folderId);
            });
        });
    }

    // –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–∞–ø–∫–∏
    openFolder(folderId) {
        if (folderId === 'favorites') {
            this.showFavorites();
        } else {
            this.showFolderContent(folderId);
        }
    }

    // –ü–æ–∫–∞–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–∞–ø–∫–∏
    showFolderContent(folderId) {
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–∞–ø–∫–∏
        console.log('Opening folder:', folderId);
    }

    // –ü–æ–∫–∞–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
    showFavorites() {
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
        console.log('Showing favorites');
    }

    // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏
    showCreateFolderModal() {
        const modalHTML = `
            <div class="modal-overlay">
                <div class="modal-content">
                    <h3>–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø–∞–ø–∫—É</h3>
                    <div class="field">
                        <label>–ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏</label>
                        <input type="text" id="newFolderName" placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –¢–æ–ø –±–ª–æ–≥–µ—Ä—ã" />
                    </div>
                    <div class="field">
                        <label>–¶–≤–µ—Ç –ø–∞–ø–∫–∏</label>
                        <div class="color-picker">
                            ${this.getColorOptions().map(color => `
                                <label class="color-option" style="background: ${color}">
                                    <input type="radio" name="folderColor" value="${color}" ${color === '#667eea' ? 'checked' : ''}>
                                </label>
                            `).join('')}
                        </div>
                    </div>
                    <div class="field">
                        <label class="checkbox">
                            <input type="checkbox" id="folderPrivate"> 
                            <span>–ü—Ä–∏–≤–∞—Ç–Ω–∞—è –ø–∞–ø–∫–∞</span>
                        </label>
                    </div>
                    <div class="modal-actions">
                        <button class="btn btn-secondary" id="cancelCreateFolder">–û—Ç–º–µ–Ω–∞</button>
                        <button class="btn" id="confirmCreateFolder">–°–æ–∑–¥–∞—Ç—å</button>
                    </div>
                </div>
            </div>
        `;

        document.body.insertAdjacentHTML('beforeend', modalHTML);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        document.getElementById('confirmCreateFolder').addEventListener('click', () => {
            const name = document.getElementById('newFolderName').value;
            const color = document.querySelector('input[name="folderColor"]:checked').value;
            const isPrivate = document.getElementById('folderPrivate').checked;
            
            if (name.trim()) {
                this.createFolder(name, color, isPrivate);
                this.closeModal();
            }
        });

        document.getElementById('cancelCreateFolder').addEventListener('click', this.closeModal);
    }

    // –í–∞—Ä–∏–∞–Ω—Ç—ã —Ü–≤–µ—Ç–æ–≤ –¥–ª—è –ø–∞–ø–æ–∫
    getColorOptions() {
        return [
            '#667eea', '#764ba2', '#f093fb', '#f5576c',
            '#4facfe', '#43e97b', '#fa709a', '#ffecd2',
            '#fc4a1a', '#f7b733', '#6a11cb', '#2575fc'
        ];
    }

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    closeModal() {
        document.querySelector('.modal-overlay')?.remove();
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –∫–ª–∏–∫–æ–≤
    handleGlobalClick(e) {
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—ã–ø–∞–¥–∞—é—â–∏—Ö –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –∏—Ö
        if (!e.target.closest('.folder-actions') && !e.target.closest('.add-to-folder-menu')) {
            this.closeAllMenus();
        }
    }

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –º–µ–Ω—é
    closeAllMenus() {
        document.querySelectorAll('.add-to-folder-menu').forEach(menu => {
            menu.style.display = 'none';
        });
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ø–∞–ø–∫—É
    handleAddToFolder(event) {
        const button = event.target.closest('.add-to-folder-btn');
        if (!button) return;

        const bloggerId = button.dataset.bloggerId;
        if (!bloggerId) return;

        // –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏
        this.showAddToFolderMenu(button, bloggerId);
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ø–∞–ø–∫—É
    showAddToFolderMenu(button, bloggerId) {
        // –ó–∞–∫—Ä—ã—Ç—å –¥—Ä—É–≥–∏–µ –º–µ–Ω—é
        this.closeAllMenus();

        const menuHTML = `
            <div class="add-to-folder-menu">
                <div class="menu-header">
                    <span>–î–æ–±–∞–≤–∏—Ç—å –≤ –ø–∞–ø–∫—É</span>
                </div>
                <div class="menu-items">
                    ${this.folders.map(folder => `
                        <div class="menu-item" data-folder-id="${folder.id}">
                            <span class="folder-color" style="background: ${folder.color}"></span>
                            <span>${folder.name}</span>
                            ${this.getFolderBloggers(folder.id).includes(bloggerId) ? 
                                '<span class="already-added">‚úì</span>' : ''}
                        </div>
                    `).join('')}
                    ${this.folders.length === 0 ? 
                        '<div class="menu-item muted">–ù–µ—Ç –ø–∞–ø–æ–∫</div>' : ''}
                </div>
                <div class="menu-footer">
                    <button class="btn-sm create-folder-from-menu">+ –ù–æ–≤–∞—è –ø–∞–ø–∫–∞</button>
                </div>
            </div>
        `;

        const menu = document.createElement('div');
        menu.innerHTML = menuHTML;
        document.body.appendChild(menu);

        // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–Ω—é
        const rect = button.getBoundingClientRect();
        menu.style.position = 'fixed';
        menu.style.top = rect.bottom + 'px';
        menu.style.left = rect.left + 'px';
        menu.style.zIndex = '1000';

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–µ–Ω—é
        menu.querySelectorAll('.menu-item').forEach(item => {
            item.addEventListener('click', () => {
                const folderId = item.dataset.folderId;
                if (folderId) {
                    this.addToFolder(bloggerId, folderId);
                    menu.remove();
                }
            });
        });

        menu.querySelector('.create-folder-from-menu').addEventListener('click', () => {
            this.showCreateFolderModal();
            menu.remove();
        });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
        setTimeout(() => {
            const closeHandler = (e) => {
                if (!menu.contains(e.target) && e.target !== button) {
                    menu.remove();
                    document.removeEventListener('click', closeHandler);
                }
            };
            document.addEventListener('click', closeHandler);
        });
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', () => {
    window.foldersSystem = new FoldersSystem();
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ –±–ª–æ–≥–µ—Ä–æ–≤
function enhanceBloggerCard(bloggerCard, bloggerData) {
    if (!bloggerData || !bloggerData.id) return;

    const actionsHTML = `
        <div class="blogger-actions">
            <button class="btn-icon toggle-favorite" data-blogger-id="${bloggerData.id}" 
                    title="${window.foldersSystem.isFavorite(bloggerData.id) ? '–£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ' : '–í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ'}">
                ${window.foldersSystem.isFavorite(bloggerData.id) ? '‚≠ê' : '‚òÜ'}
            </button>
            <button class="btn-icon add-to-folder-btn" data-blogger-id="${bloggerData.id}" title="–î–æ–±–∞–≤–∏—Ç—å –≤ –ø–∞–ø–∫—É">
                üìÅ
            </button>
        </div>
    `;

    const actionsContainer = bloggerCard.querySelector('.blogger-actions') || 
                           bloggerCard.querySelector('.card-actions');
    
    if (actionsContainer) {
        actionsContainer.innerHTML += actionsHTML;
    } else {
        bloggerCard.insertAdjacentHTML('beforeend', actionsHTML);
    }
}