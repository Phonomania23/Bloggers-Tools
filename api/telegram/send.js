// /api/telegram/send.js ‚Äî –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram —á–µ—Ä–µ–∑ Bot API
export default async function handler(req, res) {
  // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ POST-–∑–∞–ø—Ä–æ—Å—ã
  if (req.method !== 'POST') {
    return res.status(405).json({ 
      ok: false, 
      error: 'Method not allowed. Use POST.' 
    });
  }

  try {
    const { text, chatId } = req.body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!text) {
      return res.status(400).json({
        ok: false,
        error: 'Missing required field: text'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
    if (!process.env.TELEGRAM_BOT_TOKEN) {
      console.error('TELEGRAM_BOT_TOKEN is not configured');
      return res.status(500).json({
        ok: false,
        error: 'Telegram bot is not configured. Please contact administrator.'
      });
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º chatId (–∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è)
    const targetChatId = chatId || process.env.TELEGRAM_CHAT_ID;
    
    if (!targetChatId) {
      return res.status(400).json({
        ok: false,
        error: 'Chat ID is required. Either provide in request or set TELEGRAM_CHAT_ID environment variable.'
      });
    }

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    const messageText = String(text).substring(0, 4096); // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram Bot API
    const telegramUrl = `https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/sendMessage`;
    
    const response = await fetch(telegramUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: targetChatId,
        text: messageText,
        parse_mode: 'HTML',
        disable_web_page_preview: true,
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: 'üìä –û—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å',
                url: 'https://bloggers-tools.vercel.app/deal'
              }
            ]
          ]
        }
      }),
    });

    const data = await response.json();

    if (!data.ok) {
      console.error('Telegram API error:', data);
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫ Telegram
      let errorMessage = 'Failed to send Telegram message';
      if (data.description?.includes('chat not found')) {
        errorMessage = 'Chat not found. Please check the chat ID.';
      } else if (data.description?.includes('bot was blocked')) {
        errorMessage = 'Bot was blocked by the user.';
      }

      return res.status(500).json({
        ok: false,
        error: errorMessage,
        details: data.description
      });
    }

    // –£—Å–ø–µ—à–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
    console.log('Telegram message sent successfully:', {
      chat_id: targetChatId,
      message_length: messageText.length,
      message_id: data.result.message_id
    });

    return res.status(200).json({
      ok: true,
      message_id: data.result.message_id,
      chat_id: data.result.chat.id,
      message: 'Telegram message sent successfully'
    });

  } catch (error) {
    console.error('Telegram sending error:', error);
    
    return res.status(500).json({
      ok: false,
      error: 'Internal server error',
      details: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (CORS)
export const config = {
  api: {
    bodyParser: {
      sizeLimit: '10kb',
    },
  },
};